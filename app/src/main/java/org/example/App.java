/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import org.example.entities.Train;
import org.example.entities.User;
import org.example.services.UserBookingService;
import org.example.util.UserServiceUtil;

import java.io.IOException;
import java.util.*;
import java.util.function.Predicate;
import java.util.stream.Collectors;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
//        System.out.println(new App().getGreeting());
        System.out.println("Running train-booking system");
        Scanner scanner = new Scanner(System.in);
        int option = 0;
        UserBookingService userBookingService;
        try{
            userBookingService = new UserBookingService();

        }catch (IOException ex){
            System.out.println("Error in reading users.json , there is something wrong");
            return;
        }

        while(option != 7){
            System.out.println("Choose Option");
            System.out.println("1. Sign Up ");
            System.out.println("2. Login");
            System.out.println("3. Fetch Booking");
            System.out.println("4. Search Trains");
            System.out.println("5. Book a Seat");
            System.out.println("6. Cancel my Booking");
            System.out.println("7. Exit the App");

            System.out.println("Enter your choice");
            option = scanner.nextInt();
            Train trainSelectedForBooking = new Train();

            switch (option) {
                case 1:
                    System.out.println("Enter your Username");
                    String nameToSignUp = scanner.next();
                    System.out.println("Enter your Password");
                    String passwordToSignUp = scanner.next();
                    User userToSignUp = new User(nameToSignUp, passwordToSignUp,
                            UserServiceUtil.hashPassword(passwordToSignUp),
                            new ArrayList<>(), UUID.randomUUID().toString());

                    userBookingService.signUp(userToSignUp);
                    break;

                case 2:
                    System.out.println("Enter the username to login");
                    String nameToLogin = scanner.next();
                    System.out.println("Enter the password to login");
                    String passwordToLogin = scanner.next();
                    User userToLogin = new User(nameToLogin, passwordToLogin,
                            UserServiceUtil.hashPassword(passwordToLogin),
                            new ArrayList<>(), UUID.randomUUID().toString());
                    try {
                        userBookingService = new UserBookingService(userToLogin);
                    } catch (IOException ex) {
                        return;
                    }
                    break;

                case 3:
                    System.out.println("Fetching Booking");
                    userBookingService.fetchBooking();
                    break;

                case 4:
                    System.out.println("Searching Trains");
                    System.out.println("Enter source");
                    String source = scanner.next();
                    System.out.println("Enter destination");
                    String destination = scanner.next();
                    System.out.println("Searching for trains from " + source + " to " + destination);

                    List<Train> trains = userBookingService.getTrains(source, destination);
                    int index = 1;
                    for (Train train : trains) {
                        System.out.println(index + " Train id : " + train.getTrainId());
                        for (Map.Entry<String, String> entry : train.getStationTimes().entrySet()) {
                            System.out.println("station " + entry.getKey() + " time " + entry.getValue() + "");
                        }
//                        index++;
                    }
                    System.out.println("Select a train by typing 1,2,3..");
                    trainSelectedForBooking = trains.get(scanner.nextInt());
                    break;

                case 5:
                    System.out.println("Select a seat out of these seats");
                    List<List<Integer>> seats = userBookingService.fetchSeats(trainSelectedForBooking);

                    for (List<Integer> row : seats) {
                        for (Integer val : row) {
                            System.out.print(val + " ");

                        }
                        System.out.println();
                    }
                    System.out.println("Select the seat by ty[ing the row and column");
                    System.out.println("Enter the row");
                    int row = scanner.nextInt();
                    System.out.println("Enter the column");
                    int col = scanner.nextInt();
                    System.out.println("Booking your seat");
                    Boolean booked = userBookingService.bookTrainSeat(trainSelectedForBooking, row, col);

                    if (booked.equals(Boolean.TRUE)) {
                        System.out.println("Seat booked successfully");
                    } else {
                        System.out.println("Seat is not available");
                    }
                    break;
                default:
                    break;
            }
        }
    }
}

